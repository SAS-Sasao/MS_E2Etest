name: Playwright Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: write
  checks: write
  pull-requests: write
  issues: write
  packages: write
  pages: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Start backend server
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          start /b python backend/app.py > server.log 2>&1
          sleep 5
        else
          nohup python backend/app.py > server.log 2>&1 &
          echo $! > server.pid
          sleep 5
        fi
        # サーバーが起動しているか確認
        python -c "import requests, sys; try: response = requests.get('http://localhost:1234'); sys.exit(0 if response.status_code == 200 else 1); except Exception as e: print(f'Error: {e}'); [print(line) for line in open('server.log').readlines()]; sys.exit(1)"

    - name: Create test user
      run: |
        python -c "import requests, sys; response = requests.post('http://localhost:1234/register', headers={'Content-Type': 'application/json'}, json={'username': 'sasao', 'password': 'ts05140952'}); sys.exit(0 if response.status_code == 201 else print(f'Failed to create user: {response.text}') or 1)"

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache Node.js modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.npm
          node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Clean install dependencies
      run: |
        rm -f package-lock.json
        npm install
        npx playwright install --with-deps chromium

    - name: Run Playwright tests
      run: |
        echo "Running Playwright tests..."
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        npx playwright test --reporter=list

    - name: Prepare test results
      if: always()
      shell: bash
      run: |
        echo "Preparing test results..."
        mkdir -p playwright-report test-results test-screenshots
        touch server.log
        echo "Directory structure:"
        find . -type d
        echo "File list:"
        find . -type f

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          playwright-report
          test-results
          test-screenshots
          server.log
        retention-days: 30

    - name: Stop backend server
      if: always()
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          taskkill /F /IM python.exe || true
        else
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi
        fi
