name: Playwright Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  actions: write
  checks: write
  pull-requests: write
  issues: write
  packages: write
  pages: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        check-latest: true

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Check and clean port
      shell: bash
      run: |
        echo "Checking if port 1234 is in use..."
        if lsof -i:1234; then
          echo "Port 1234 is in use. Killing processes..."
          lsof -ti:1234 | xargs kill -9 || true
        fi

    - name: Start backend server
      shell: bash
      run: |
        mkdir -p logs
        echo "Starting backend server..."
        # 既存のサーバーログとPIDファイルをクリーンアップ
        rm -f logs/server.log logs/server.pid
        if [ "$RUNNER_OS" = "Windows" ]; then
          python backend/app.py > logs/server.log 2>&1 &
        else
          nohup python backend/app.py > logs/server.log 2>&1 &
          echo $! > logs/server.pid
        fi
        
        # サーバー起動を待機
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -s http://localhost:1234 > /dev/null; then
            echo "Server is up and running"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "Server failed to start"
            cat logs/server.log
            exit 1
          fi
          echo "Attempt $i: Server not ready, waiting..."
          sleep 1
        done
        # サーバーの状態を確認
        echo "Checking server status..."
        response=$(curl -s -w "\n%{http_code}" http://localhost:1234)
        status_code=$(echo "$response" | tail -n1)
        if [ "$status_code" != "200" ]; then
          echo "Server returned status code: $status_code"
          cat logs/server.log
          exit 1
        fi

    - name: Create test user
      shell: bash
      run: |
        echo "Creating test user..."
        for i in {1..5}; do
          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"username":"sasao","password":"ts05140952"}' \
            -w "\n%{http_code}" \
            http://localhost:1234/register)
          
          status_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | head -n1)
          
          if [ "$status_code" = "201" ]; then
            echo "Test user created successfully"
            break
          fi
          
          if [ $i -eq 5 ]; then
            echo "Failed to create test user after 5 attempts"
            echo "Last response: $body"
            echo "Status code: $status_code"
            cat logs/server.log
            exit 1
          fi
          
          echo "Attempt $i failed, retrying in 2 seconds..."
          sleep 2
        done

    - name: Setup Node.js and Playwright
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Setup display
      run: |
        echo "Setting up Xvfb..."
        Xvfb :99 -screen 0 1280x960x24 &
        echo "DISPLAY=:99" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        echo "Installing system dependencies..."
        sudo apt-get update
        sudo apt-get install -y xvfb libglib2.0-0 libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libdbus-1-3 libxcb1 libxkbcommon0 libx11-6 libxcomposite1 libxdamage1 libxext6 libxfixes3 libxrandr2 libgbm1 libpango-1.0-0 libcairo2 libasound2 libatspi2.0-0
        
        echo "Installing npm dependencies..."
        npm ci
        
    - name: Install Playwright
      run: |
        echo "Installing Playwright..."
        npm install -D @playwright/test@latest
        
    - name: Install browser
      run: |
        echo "Installing Chromium..."
        npx playwright install chromium

    - name: Environment check
      run: |
        echo "System information:"
        uname -a
        echo "Node.js version:"
        node -v
        echo "npm version:"
        npm -v
        echo "Python version:"
        python --version
        echo "Pip packages:"
        pip list
        echo "Workspace contents:"
        ls -R

    - name: Run Playwright tests
      env:
        CI: 'true'
        PLAYWRIGHT_JUNIT_OUTPUT_NAME: 'test-results/junit.xml'
        PLAYWRIGHT_HTML_REPORT: 'playwright-report'
        PLAYWRIGHT_SCREENSHOT_ON_FAILURE: '1'
        DEBUG: 'pw:api,pw:browser*,pw:protocol'
        NODE_ENV: 'test'
        DISPLAY: ':99'
      run: |
        echo "Running Playwright tests..."
        echo "Verifying server status..."
        for i in {1..5}; do
          if curl -s http://localhost:1234 > /dev/null; then
            echo "Server is responding"
            break
          fi
          if [ $i -eq 5 ]; then
            echo "Server is not responding after 5 attempts. Checking logs:"
            cat logs/server.log
            exit 1
          fi
          echo "Attempt $i: Server not ready, waiting..."
          sleep 2
        done
        
        echo "Starting tests with debug logging..."
        xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" -- \
        npx playwright test \
          --project=chromium \
          --reporter=list,html \
          --workers=1 \
          --retries=2 \
          --timeout=120000 \
          --trace on

    - name: Prepare test results
      if: always()
      shell: bash
      run: |
        echo "Preparing test results..."
        mkdir -p playwright-report test-results test-screenshots logs
        echo "Directory structure:"
        find . -type d
        echo "File list:"
        find . -type f

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          playwright-report/
          test-results/
          test-screenshots/
          logs/
        retention-days: 30

    - name: Stop backend server
      if: always()
      shell: bash
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          taskkill /F /IM python.exe || true
        else
          if [ -f logs/server.pid ]; then
            kill $(cat logs/server.pid) || true
          fi
        fi
